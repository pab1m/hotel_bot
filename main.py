import asyncio
import sqlite3

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InputFile, FSInputFile
from aiogram import types

from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from kbds import *
from inline import *


TOKEN = "6822014885:AAGfBcgj1HZeA2BJ1LlFIg76bWhh0gzWQzM"

ALLOWED_UPDATES = ['message, edited_message']

bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        f"–í—ñ—Ç–∞—é, <b>{message.from_user.full_name}</b>, —è –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è —ñ–∑ –≥–æ—Ç–µ–ª–µ–º "
        f"'–£–∫—Ä–∞—ó–Ω–∞'!", parse_mode="html", reply_markup=start_kb)


@dp.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
async def contact_info(message: types.Message):
    phone_link_1 = f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–≤'—è–∑–∫—É 1: +380673406322"
    phone_link_2 = f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–≤'—è–∑–∫—É 2: +380326542142"
    website_url = "https://zlmr.gov.ua/index.php/zhkh/komunalni-pidpryiemstva/hotel-ukraina"
    map_location = ("https://www.google.com/maps/place/%D0%9A%D0%9F+%D0%B3%D0%BE%D1%82%D0%B5%D0%BB%D1%8C+%C2%AB%D0%A3%D0%BA%D1%80%D0%B0%D1%97%D0%BD%D0%B0%C2%BB/@49.8055415,"
                    "24.8994852,18.75z/data=!4m9!3m8!1s0x47300759c6464e6b:0x5a8e1f2257f61a24!5m2!4m1!1i2!8m2!3d49.8055267!4d24.8997192!16s%2Fg%2F11h4rv8b3y?authuser=0&entry=ttu")

    contact_info_keyboard = InlineKeyboardBuilder()
    contact_info_keyboard.add(InlineKeyboardButton(text="üåê–í—ñ–¥–≤—ñ–¥–∞—Ç–∏ —Å–∞–π—Ç", url=website_url),
                              InlineKeyboardButton(text="üìç–ù–∞ –∫–∞—Ä—Ç—ñ", url=map_location))

    await message.answer(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ<b>–ì–æ—Ç–µ–ª—å '–£–∫—Ä–∞—ó–Ω–∞'</b>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                         f"üìÖ–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: <b>—Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ</b>\n\n"
                         
                         f"üìû{phone_link_1}\n"
                         f"üìû{phone_link_2}\n"
                         f"üìß–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: <a type='email'>hotel.zl@ukr.net</a>\n\n"
                         
                         f"üë®üè´–ö–µ—Ä—ñ–≤–Ω–∏–∫:  –ì–∞–≤—Ä–∏—à–∫—ñ–≤ –Ü—Ä–µ–Ω–∞ –ü–µ—Ç—Ä—ñ–≤–Ω–∞\n\n"
                         
                         f"üìç–ê–¥—Ä–µ—Å–∞: 80700 –õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª. –ó–æ–ª–æ—á—ñ–≤—Å—å–∫–∏–π —Ä-–Ω, –º. –ó–æ–ª–æ—á—ñ–≤ –≤—É–ª. –í–∞–ª–æ–≤–∞ 4\n",
                         parse_mode="html", reply_markup=contact_info_keyboard.as_markup(resize_keyboard=True)
            #              get_url_btns(
            # btns={
            #     'üåê–í—ñ–¥–≤—ñ–¥–∞—Ç–∏ —Å–∞–π—Ç': f'{website_url}',
            #     'üìç–ù–∞ –∫–∞—Ä—Ç—ñ': f'{map_location}'
            # })
    )


@dp.message(F.text == "–ù–æ–º–µ—Ä–∏")
async def rooms(message: types.Message):
    await message.answer(f"üè†–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥—É: 18 –Ω–æ–º–µ—Ä—ñ–≤ (36 –º—ñ—Å—Ü—å)\n")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=rooms_and_main_kb.as_markup(resize_keyboard=True, input_field_placeholder='–Ø–∫–∏–π –Ω–æ–º–µ—Ä –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?'))


@dp.message(F.text == "üòê –°—Ç–∞–Ω–¥–∞—Ä—Ç")
async def show_info_by_standard_room(message: types.Message, state: FSMContext):
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏", reply_markup=standard.as_markup(resize_keyboard=True))
    # await state.set_state(BookingState.waiting_for_room_type)


@dp.callback_query(lambda query: query.data == 'one_room_standard')
async def one_room_standard(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/standard1.webp')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 400 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏", reply_markup=standard.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.callback_query(lambda query: query.data == 'two_room_standard')
async def two_room_standard(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/standard2.jpg')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 600 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏", reply_markup=standard.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.message(F.text == "üòÅ –ö–æ–º—Ñ–æ—Ä—Ç")
async def show_info_by_comfort(message: types.Message):
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏", reply_markup=comfort.as_markup(resize_keyboard=True))


@dp.callback_query(lambda query: query.data == 'one_room_comfort')
async def one_room_comfort(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/comfort1.webp')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 500 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏", reply_markup=comfort.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.callback_query(lambda query: query.data == 'two_room_comfort')
async def two_room_comfort(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/comfort2.webp')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 700 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏", reply_markup=comfort.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.message(F.text == "üòé –õ—é–∫—Å")
async def show_info_by_luxe(message: types.Message):
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏", reply_markup=luxe.as_markup(resize_keyboard=True))


@dp.callback_query(lambda query: query.data == 'one_room_luxe')
async def one_room_luxe(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/luxe1.webp')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 700 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏", reply_markup=luxe.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.callback_query(lambda query: query.data == 'two_room_luxe')
async def two_room_luxe(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/luxe2.jpg')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 900 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏", reply_markup=luxe.as_markup(resize_keyboard=True))
    await callback.answer()


class BookingState(StatesGroup):
    waiting_for_room_type = State()
    # waiting_one_or_two_room_type = State()
    waiting_for_checkin_date = State()
    waiting_for_checkout_date = State()


@dp.message(F.text == "–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä")
async def start_booking(message: types.Message, state: FSMContext):
    await state.set_state(BookingState.waiting_for_room_type)
    await message.answer("–î–ª—è –ø–æ—á–∞—Ç–∫—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–æ–º–µ—Ä–∞:", reply_markup=rooms_kb.as_markup(resize_keyboard=True))


# @dp.message(BookingState.waiting_for_room_type)
# async def process_room_type(message: types.Message, state: FSMContext):
#     one_or_two_room_type = message.text
#     await state.update_data(room_type=one_or_two_room_type)
#     await state.set_state(BookingState.waiting_one_or_two_room_type)
#     await message.answer("–û–¥–Ω–æ–º—ñ—Å–Ω–∞ —á–∏ –î–≤–æ–º—ñ—Å–Ω–∞?:", reply_markup=one_or_two_rooms_kb.as_markup(resize_keyboard=True))


@dp.message(BookingState.waiting_for_room_type)
async def process_room_type(message: types.Message, state: FSMContext):
    room_type = message.text
    await state.update_data(room_type=room_type)
    await state.set_state(BookingState.waiting_for_checkin_date)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞—ó–∑–¥—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD):", reply_markup=del_kbd)


@dp.message(BookingState.waiting_for_checkin_date)
async def process_checkin_date(message: types.Message, state: FSMContext):
    checkin_date = message.text
    await state.update_data(checkin_date=checkin_date)
    await state.set_state(BookingState.waiting_for_checkout_date)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤–∏—ó–∑–¥—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD):")


@dp.message(BookingState.waiting_for_checkout_date)
async def process_checkout_date(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    room_type = data.get('room_type')
    # one_or_two_room_type = data.get('one_or_two_room_type')
    checkin_date = data.get('checkin_date')
    checkout_date = message.text
    # print(room_type + ' ' + one_or_two_room_type + ' ' + checkin_date + ' ' + checkout_date)
    print(room_type + ' ' + checkin_date + ' ' + checkout_date)

    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ!")


@dp.message(F.text == "‚óÄ –ù–∞ –≥–æ–ª–æ–≤–Ω—É")
async def start_field(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=start_kb)


class FeedbackState(StatesGroup):
    waiting_for_feedback = State()


@dp.message(F.text == "–í—ñ–¥–≥—É–∫–∏")
async def feedbacks(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–≥—É–∫:")
    await state.set_state(FeedbackState.waiting_for_feedback)


@dp.message(FeedbackState.waiting_for_feedback)
async def send_feedback(message: types.Message):
    data = {'user_text': message.text}

    id_user = message.from_user.id

    conn = sqlite3.connect('feedbacks.db')
    cursor = conn.cursor()
    cursor.execute(
        f"INSERT INTO feedback (user_id, user_text) VALUES ({id_user}, '{data['user_text']}')")
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫ ‚úÖ", reply_markup=start_kb)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=ALLOWED_UPDATES)

asyncio.run(main())
