import asyncio
import sqlite3

from aiogram.filters import StateFilter
from aiogram.types import FSInputFile
from aiogram import types

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from datetime import datetime

from kbds import *
from inline import *

from places import *

TOKEN = "6822014885:AAGfBcgj1HZeA2BJ1LlFIg76bWhh0gzWQzM"

ALLOWED_UPDATES = ['message, edited_message']

bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        f"–í—ñ—Ç–∞—é, <b>{message.from_user.full_name}</b>, —è –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, "
        f"—è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è —ñ–∑ –≥–æ—Ç–µ–ª–µ–º "
        f"'–£–∫—Ä–∞—ó–Ω–∞'!", parse_mode="html", reply_markup=start_kb)


@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
async def contact_info(message: types.Message):
    phone_link_1 = f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–≤'—è–∑–∫—É 1: +380673406322"
    phone_link_2 = f"–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–≤'—è–∑–∫—É 2: +380326542142"
    website_url = "https://zlmr.gov.ua/index.php/zhkh/komunalni-pidpryiemstva/hotel-ukraina"
    map_location = (
        "https://www.google.com/maps/place/%D0%9A%D0%9F+%D0%B3%D0%BE%D1%82%D0%B5%D0%BB%D1%8C+%C2%AB%D0%A3%D0%BA%D1%80%D0%B0%D1%97%D0%BD%D0%B0%C2%BB/@49.8055415,"
        "24.8994852,18.75z/data=!4m9!3m8!1s0x47300759c6464e6b:0x5a8e1f2257f61a24!5m2!4m1!1i2!8m2!3d49.8055267!4d24.8997192!16s%2Fg%2F11h4rv8b3y?authuser=0&entry=ttu")

    contact_info_keyboard = InlineKeyboardBuilder()
    contact_info_keyboard.add(InlineKeyboardButton(text="üåê–í—ñ–¥–≤—ñ–¥–∞—Ç–∏ —Å–∞–π—Ç", url=website_url),
                              InlineKeyboardButton(text="üìç–ù–∞ –∫–∞—Ä—Ç—ñ", url=map_location))

    await message.answer(f'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ<b>–ì–æ—Ç–µ–ª—å "–£–∫—Ä–∞—ó–Ω–∞"</b>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n'
                         f"üìÖ–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: <b>—Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ</b>\n\n"

                         f"üìû{phone_link_1}\n"
                         f"üìû{phone_link_2}\n"
                         f"üìß–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: <a type='email'>hotel.zl@ukr.net</a>\n\n"

                         f"üë®üè´–ö–µ—Ä—ñ–≤–Ω–∏–∫:  –ì–∞–≤—Ä–∏—à–∫—ñ–≤ –Ü—Ä–µ–Ω–∞ –ü–µ—Ç—Ä—ñ–≤–Ω–∞\n\n"

                         f"üìç–ê–¥—Ä–µ—Å–∞: 80700 –õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª. –ó–æ–ª–æ—á—ñ–≤—Å—å–∫–∏–π —Ä-–Ω, –º. –ó–æ–ª–æ—á—ñ–≤ –≤—É–ª. –í–∞–ª–æ–≤–∞ 4\n",
                         parse_mode="html", reply_markup=contact_info_keyboard.as_markup(resize_keyboard=True))


class FeedbackState(StatesGroup):
    waiting_for_feedback = State()


@dp.message(F.text == "üí¨ –í—ñ–¥–≥—É–∫–∏")
async def feedbacks(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–≥—É–∫:", reply_markup=del_kbd)
    await state.set_state(FeedbackState.waiting_for_feedback)


@dp.message(FeedbackState.waiting_for_feedback)
async def send_feedback(message: types.Message, state: FSMContext):
    data = {'user_text': message.text}

    id_user = message.from_user.id

    conn = sqlite3.connect('feedbacks.db')
    cursor = conn.cursor()
    cursor.execute(
        f"INSERT INTO feedback (user_id, user_text) VALUES ({id_user}, '{data['user_text']}')")
    conn.commit()
    conn.close()
    await state.clear()
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫ ‚úÖ", reply_markup=start_kb)


@dp.message(F.text == "üèò –ù–æ–º–µ—Ä–∏")
async def rooms(message: types.Message):
    await message.answer(f"üè†–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ñ–æ–Ω–¥—É: 18 –Ω–æ–º–µ—Ä—ñ–≤ (36 –º—ñ—Å—Ü—å)\n")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=rooms_and_main_kb.as_markup(resize_keyboard=True))


@dp.message(F.text == "üòê –°—Ç–∞–Ω–¥–∞—Ä—Ç")
async def show_info_by_standard_room(message: types.Message):
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=standard.as_markup(resize_keyboard=True))


@dp.callback_query(lambda query: query.data == 'one_room_standard')
async def one_room_standard(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/standard1.webp')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 400 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=standard.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.callback_query(lambda query: query.data == 'two_room_standard')
async def two_room_standard(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/standard2.jpg')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 600 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=standard.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.message(F.text == "üòÅ –ö–æ–º—Ñ–æ—Ä—Ç")
async def show_info_by_comfort(message: types.Message):
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=comfort.as_markup(resize_keyboard=True))


@dp.callback_query(lambda query: query.data == 'one_room_comfort')
async def one_room_comfort(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/comfort1.webp')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 500 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=comfort.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.callback_query(lambda query: query.data == 'two_room_comfort')
async def two_room_comfort(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/comfort2.webp')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 700 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=comfort.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.message(F.text == "üòé –õ—é–∫—Å")
async def show_info_by_luxe(message: types.Message):
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=luxe.as_markup(resize_keyboard=True))


@dp.callback_query(lambda query: query.data == 'one_room_luxe')
async def one_room_luxe(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/luxe1.webp')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 700 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=luxe.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.callback_query(lambda query: query.data == 'two_room_luxe')
async def two_room_luxe(callback: types.CallbackQuery):
    photo = FSInputFile(r'rooms_photo/luxe2.jpg')
    await bot.send_photo(callback.message.chat.id, photo)
    await callback.message.answer(f"‚ùó–¶—ñ–Ω–∞ - 900 –≥—Ä–Ωüí∏\n")
    await callback.message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—ñ–º–Ω–∞—Ç–∏:", reply_markup=luxe.as_markup(resize_keyboard=True))
    await callback.answer()


@dp.message(F.text == "üó∫ –ú—ñ—Å—Ü—è –ø–æ—Ä—É—á")
async def place_nearby(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å:", reply_markup=places_nearby.as_markup(resize_keyboard=True))


@dp.message(F.text == "üíä –ê–ø—Ç–µ–∫–∏")
async def pharmacies(message: types.Message):
    pharmacy_1 = ("–ó–∞—Ö—ñ–¥–Ω–∞ –§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–Ω–∞ –ö–æ–º–ø–∞–Ω—ñ—è", "–≤—É–ª. –í–æ–ª–æ–¥–∏–º–∏—Ä–∞ –Ü–≤–∞—Å—é–∫–∞ 2", "08:30-21:00", "https://maps.app.goo.gl/zcFBVZwtxUvVcsoS8")
    pharmacy_2 = ("–ü–æ–¥–æ—Ä–æ–∂–Ω–∏–∫", "–≤—É–ª. –í–∞—Å–∏–ª—è –ü–∞—á–æ–≤—Å—å–∫–æ–≥–æ 1", "08:00‚Äì18:00", "https://maps.app.goo.gl/rAyYg88zmJY1zqq9A")
    pharmacy_3 = ("–ê–ø—Ç–µ–∫–∞ 3—ñ", "–≤—É–ª. –ú–∞—Ä–∫—ñ—è–Ω–∞ –®–∞—à–∫–µ–≤–∏—á–∞ 5", "08:00‚Äì20:00", "https://maps.app.goo.gl/TLqEi1kRw3vyxkJ66")

    pharmacies_info = place_def(pharmacy_1, pharmacy_2, pharmacy_3)

    await message.answer(pharmacies_info, parse_mode="html")


@dp.message(F.text == "üõû –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂—ñ")
async def tire_fitting(message: types.Message):
    tire_fitting_1 = ("–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", "–≤—É–ª. –Ü–≤–∞–Ω–∞ –¢—Ä—É—à–∞", "09:00‚Äì18:00", "https://maps.app.goo.gl/L1PjnCUXd3Jxtja49")
    tire_fitting_2 = ("Redbox", "–≤—É–ª. –ë—Ä–æ–¥—ñ–≤—Å—å–∫–∞ 19", "09:00‚Äì19:00", "https://maps.app.goo.gl/PwmNuuhTGWA92Ue8A")
    tire_fitting_3 = ("–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", "–≤—É–ª. –õ—å–≤—ñ–≤—Å—å–∫–∞ 50", "09:00‚Äì18:00", "https://maps.app.goo.gl/sPLhr41LeznSvoKL6")

    tire_fitting_info = place_def(tire_fitting_1, tire_fitting_2, tire_fitting_3)

    await message.answer(tire_fitting_info, parse_mode="html")


@dp.message(F.text == "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω–∏ / –ü—ñ—Ü–µ—Ä—ñ—ó")
async def restaurants_and_pizzerias(message: types.Message):
    restaurants_and_pizzerias_1 = ("–ü—Ä—ñ–º–∞-–ü—ñ—Ü–∞", "–≤—É–ª. –í–∞–ª–æ–≤–∞ 4–∞", "10:00‚Äì22:00", "https://maps.app.goo.gl/vg7YDVGDCp4w42rc8")
    restaurants_and_pizzerias_2 = ("Piccadilly", "–≤—É–ª. –ú–∏—Ö–∞–π–ª–∞ –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–∞ 2–∞", "09:00‚Äì19:00", "https://maps.app.goo.gl/Ac9q9QDnrXuoKfnw5")
    restaurants_and_pizzerias_3 = ("–ú–∞—è–∫", "–≤—É–ª. –ü—É—à–∫—ñ–Ω–∞", "11:00‚Äì22:00", "https://maps.app.goo.gl/6hEW1DYAZLPBdw239")

    restaurants_and_pizzerias_info = place_def(restaurants_and_pizzerias_1, restaurants_and_pizzerias_2, restaurants_and_pizzerias_3)

    await message.answer(restaurants_and_pizzerias_info, parse_mode="html")


@dp.message(F.text == "üçÖ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ñ –º–∞–≥–∞–∑–∏–Ω–∏")
async def product(message: types.Message):
    product_1 = ("–ù–∞—à –ö—Ä–∞–π", "–≤—É–ª. –°—ñ—á–æ–≤–∏—Ö –°—Ç—Ä—ñ–ª—å—Ü—ñ–≤ 5", "08:00‚Äì22:00", "https://maps.app.goo.gl/aBDppJERnFj1Jnpt6")
    product_2 = ("–ì—É—Ä–º–∞–Ω", "–≤—É–ª. –°—ñ—á–æ–≤–∏—Ö –°—Ç—Ä—ñ–ª—å—Ü—ñ–≤ 2–î", "08:00‚Äì20:00", "https://maps.app.goo.gl/zHDey7C5qa1wUK6i8")
    product_3 = ("–ê–¢–ë", "–≤—É–ª. –õ—å–≤—ñ–≤—Å—å–∫–∞ 5–ë", "08:00‚Äì23:00", "https://maps.app.goo.gl/oV9yEkcsk7Nn6djYA")

    product_info = place_def(product_1, product_2, product_3)

    await message.answer(product_info, parse_mode="html")


@dp.message(F.text == "üíà –ü–µ—Ä—É–∫–∞—Ä–Ω—ñ / –ë–∞—Ä–±–µ—Ä—à–æ–ø–∏")
async def hairdressers(message: types.Message):
    hairdressers_1 = ("Barbershop Scissors", "–≤—É–ª. –õ—å–≤—ñ–≤—Å—å–∫–∞ 5–ë", "10:00‚Äì20:00", "https://maps.app.goo.gl/Vvi8ZRqTb6Stm4Tq6")
    hairdressers_2 = ("Barbershop Berserker", "–≤—É–ª. –†–æ–º–∞–Ω–∞ –®—É—Ö–µ–≤–∏—á–∞ 3–∞", "10:00‚Äì21:00", "https://maps.app.goo.gl/a1PSvhYvRAyRJDZY8")
    hairdressers_3 = ("–ü–µ—Ä—É–∫–∞—Ä–Ω—è ¬´–Æ–ª—è¬ª", "–≤—É–ª. –ú–∏—Ö–∞–π–ª–∞ –õ–µ—Ä–º–æ–Ω—Ç–æ–≤–∞ 2–∞", "09:00‚Äì18:00", "https://maps.app.goo.gl/Erzgew2XYQWhaN9i8")

    hairdressers_info = place_def(hairdressers_1, hairdressers_2, hairdressers_3)

    await message.answer(hairdressers_info, parse_mode="html")


@dp.message(F.text == "üè∞ –ú—ñ—Å—Ü—è –¥–ª—è –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É")
async def vacation(message: types.Message):
    vacation_1 = ("–ü–∞—Ä–∫ —ñ–º–µ–Ω—ñ –≥–µ—Ç—å–º–∞–Ω–∞ –£–∫—Ä–∞—ó–Ω–∏ –°–∞–º—É—ó–ª–∞ –ó–±–æ—Ä–æ–≤—Å—å–∫–æ–≥–æ", "–≤—É–ª. –í–∞–ª–æ–≤–∞", "–¶—ñ–ª–æ–¥–æ–±–æ–≤–æ", "https://maps.app.goo.gl/xCUbDUYnD63t9yGy5")
    vacation_2 = ("–ó–æ–ª–æ—á—ñ–≤—Å—å–∫–∏–π –∑–∞–º–æ–∫", "–≤—É–ª. –¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞", "11:00‚Äì17:30", "https://maps.app.goo.gl/5Mm983YMuq4zhQdK8")
    vacation_3 = ("–ü–∞—Ä–∫ ¬´–ó–¥–æ—Ä–æ–≤'—è¬ª", "–≤—É–ª. –ú–∞—Ä–∫—ñ—è–Ω–∞ –®–∞—à–∫–µ–≤–∏—á–∞", "–¶—ñ–ª–æ–¥–æ–±–æ–≤–æ", "https://maps.app.goo.gl/QzXmcVcc1jti3Qb18")

    vacation_info = place_def(vacation_1, vacation_2, vacation_3)

    await message.answer(vacation_info, parse_mode="html")


class BookingState(StatesGroup):
    room_type = State()
    one_or_two_room_type = State()
    checkin_date = State()
    checkout_date = State()
    name = State()


@dp.message(F.text == "üìñ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤")
async def start_booking(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å:", reply_markup=reservation_kb.as_markup(resize_keyboard=True))


@dp.message(F.text == "üîî –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä")
async def booking(message: types.Message, state: FSMContext):
    await message.answer(
        '–î–ª—è –ø–æ—á–∞—Ç–∫—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–æ–º–µ—Ä–∞: \n(—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –≤—Å—ñ –¥—ñ—ó, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É <b>"—Å–∫–∞—Å—É–≤–∞—Ç–∏"</b>)',
        reply_markup=rooms_kb.as_markup(resize_keyboard=True), parse_mode='html')
    await state.set_state(BookingState.room_type)


@dp.message(StateFilter('*'), Command("—Å–∫–∞—Å—É–≤–∞—Ç–∏"))
@dp.message(StateFilter('*'), F.text.casefold() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏")
@dp.message(StateFilter('*'), F.text == "‚ùå–°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("‚ùó–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞‚ùó", reply_markup=reservation_kb.as_markup(resize_keyboard=True))


@dp.message(BookingState.room_type)
async def one_or_two_rooms_type(message: types.Message, state: FSMContext):
    room_type = message.text
    if room_type in ["–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ö–æ–º—Ñ–æ—Ä—Ç", "–õ—é–∫—Å"]:
        await state.update_data(room_type=room_type)
        await message.answer("–û–¥–Ω–æ–º—ñ—Å–Ω–∞ —á–∏ –î–≤–æ–º—ñ—Å–Ω–∞?", reply_markup=one_or_two_rooms_kb.as_markup(resize_keyboard=True))
        await state.set_state(BookingState.one_or_two_room_type)
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=rooms_kb.as_markup(resize_keyboard=True))


@dp.message(BookingState.one_or_two_room_type)
async def checkin_dates(message: types.Message, state: FSMContext):
    one_or_two_room_type = message.text
    if one_or_two_room_type in ["–û–¥–Ω–æ–º—ñ—Å–Ω–∞", "–î–≤–æ–º—ñ—Å–Ω–∞"]:
        await state.update_data(one_or_two_room_type=one_or_two_room_type)
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞—ó–∑–¥—É:", reply_markup=generate_date_keyboard(datetime.now().date().today()))
        await state.set_state(BookingState.checkin_date)
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —ñ–∑ —Å–ø–∏—Å–∫—É.", reply_markup=one_or_two_rooms_kb.as_markup(resize_keyboard=True))


@dp.message(BookingState.checkin_date)
async def checkout_dates(message: types.Message, state: FSMContext):
    try:
        checkin_date = datetime.strptime(message.text, "%d-%m-%Y").date()
        await state.update_data(checkin_date=checkin_date)
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –≤–∏—ó–∑–¥—É:", reply_markup=generate_date_keyboard(checkin_date))
        await state.set_state(BookingState.checkout_date)
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö.")


@dp.message(BookingState.checkout_date)
async def process_checkin_inf(message: types.Message, state: FSMContext):
    try:
        await state.update_data(checkout_date=datetime.strptime(message.text, "%d-%m-%Y").date())
        await message.answer("–í–≤–µ–¥—ñ—Ç—å <b>–ü—Ä—ñ–∑–≤–∏—â–µ</b> —Ç–∞ <b>–Ü–º'—è</b>", parse_mode="html", reply_markup=del_kbd)
        await state.set_state(BookingState.name)
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")


@dp.message(BookingState.name)
async def process_checkout_date(message: types.Message, state: FSMContext):
    data = await state.get_data()
    id_user = message.from_user.id
    room_type = data.get('room_type')
    one_or_two_room_type = data.get('one_or_two_room_type')
    checkin_date = data.get('checkin_date')
    checkout_date = data.get('checkout_date')

    inf = message.text
    inf_parts = inf.split()
    first_name = inf_parts[0]
    last_name = ' '.join(inf_parts[1:])

    conn = sqlite3.connect('reservation.db')
    cursor = conn.cursor()
    cursor.execute(
        f"INSERT INTO reservation (user_id, room_type, one_or_two_room_type, checkin_date, checkout_date, first_name, last_name)"
        f" VALUES ({id_user}, '{room_type}', '{one_or_two_room_type}', '{checkin_date}', '{checkout_date}', '{first_name}', '{last_name}')")
    conn.commit()
    conn.close()

    await state.clear()
    await message.answer("‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ! ‚úÖ", reply_markup=start_kb)
    await state.clear()


@dp.message(F.text == "üìú –ú–æ—ó –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ –Ω–æ–º–µ—Ä–∏")
async def my_bookings(message: types.Message):
    user_id = message.from_user.id

    conn = sqlite3.connect('reservation.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM reservation WHERE user_id = {user_id}")
    reservations = cursor.fetchall()
    conn.close()

    if not reservations:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤.")
        return

    response = "–í–∞—à—ñ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ –Ω–æ–º–µ—Ä–∏:\n"
    await message.answer(response, reply_markup=my_reservation_kb.as_markup(resize_keyboard=True))

    for reservation in reservations:
        response = (f"\n‚úÖ ID –í–∞—à–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: <b>{reservation[0]}</b>"
                    f"\nüè† –¢–∏–ø –Ω–æ–º–µ—Ä–∞: <b>{reservation[2]}</b> "
                    f"\nüõè –û–¥–Ω–æ-/–¥–≤–æ–º—ñ—Å–Ω–∞: <b>{reservation[3]}</b> "
                    f"\nüóì –î–∞—Ç–∞ –∑–∞—ó–∑–¥—É: <b>{reservation[4]}</b> "
                    f"\nüìÜ –î–∞—Ç–∞ –≤–∏—ó–∑–¥—É: <b>{reservation[5]}</b>\n")
        await message.answer(response, parse_mode="html")


@dp.message(lambda message: message.text.startswith("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"))
async def cancel_reservation(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect('reservation.db')
    cursor = conn.cursor()

    cursor.execute(f"SELECT * FROM reservation WHERE user_id = {user_id}")
    remaining_reservations = cursor.fetchall()
    if not remaining_reservations:
        await message.answer("–£ –≤–∞—Å –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –∂–æ–¥–Ω–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è.")
    else:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å ID –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=del_kbd)

        @dp.message(lambda msg: msg.from_user.id == user_id)
        async def process_reservation_id(msg: types.Message):
            try:
                reservation_id = int(msg.text)
            except ValueError:
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ.")
                return

            cursor.execute(f"SELECT * FROM reservation WHERE id = {reservation_id} AND user_id = {user_id}")
            reservation = cursor.fetchone()

            if reservation:
                cursor.execute(f"DELETE FROM reservation WHERE id = {reservation_id}")
                conn.commit()
                await message.answer(f"–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è <b>{reservation_id}</b> –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=reservation_kb.as_markup(resize_keyboard=True), parse_mode='html')
            else:
                await message.answer("–¶–µ –Ω–µ –≤–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.", reply_markup=reservation_kb.as_markup(resize_keyboard=True))
    # conn.close()


@dp.message(F.text == "‚óÄ –ù–∞ –≥–æ–ª–æ–≤–Ω—É")
async def start_field(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=start_kb)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=ALLOWED_UPDATES)

asyncio.run(main())
